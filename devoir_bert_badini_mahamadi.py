# -*- coding: utf-8 -*-
"""Devoir_BERT_BADINI_Mahamadi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cnqpf9hBUg0Y67ntOif-NE3gXsqoxKGp
"""

!pip install transformers

import pandas as pd

df = pd.read_csv("/content/inshort_news_data-1 2.csv",sep=",")  # ou autre format
print(df.head(10))

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from torch.utils.data import Dataset, DataLoader
from transformers import AutoTokenizer
import torch
import torch.nn as nn

# Encodage des labels texte
le = LabelEncoder()
df['label_encoded'] = le.fit_transform(df['news_category'])

# Split des données
X_train, X_val, y_train, y_val = train_test_split(df['news_article'], df['label_encoded'], test_size=0.2)

# Tokenizer BERT
tokenizer = AutoTokenizer.from_pretrained("google-bert/bert-base-uncased")

# Dataset personnalisé
class NewsDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len=512):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        encoding = self.tokenizer(
            self.texts[idx],
            truncation=True,
            padding='max_length',
            max_length=self.max_len,
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].squeeze(0),
            'attention_mask': encoding['attention_mask'].squeeze(0),
            'labels': torch.tensor(self.labels[idx], dtype=torch.long)
        }

# DataLoaders
train_dataset = NewsDataset(X_train.tolist(), y_train.tolist(), tokenizer)
val_dataset = NewsDataset(X_val.tolist(), y_val.tolist(), tokenizer)

train_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=8)

from transformers import BertModel

class CustomBERT(nn.Module):
    def __init__(self, n_class):
        super(CustomBERT, self).__init__()
        self.bert = BertModel.from_pretrained("google-bert/bert-base-uncased")
        self.dropout = nn.Dropout(0.3)
        self.classifier = nn.Linear(self.bert.config.hidden_size, n_class)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        pooled_output = self.dropout(pooled_output)
        logits = self.classifier(pooled_output)
        return logits

# Entraînement du modèle
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = CustomBERT(n_class=len(le.classes_))
model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)

num_epochs = 3

for epoch in range(num_epochs):
    model.train()
    total_loss = 0

    for batch in train_loader:
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['labels'].to(device)

        optimizer.zero_grad()

        logits = model(input_ids, attention_mask)
        loss = criterion(logits, labels)

        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_loss = total_loss / len(train_loader)
    print(f"Epoch {epoch+1}/{num_epochs}, Training Loss: {avg_loss:.4f}")

# demo.py
import gradio as gr
import torch
from transformers import AutoTokenizer
from model import CustomBERT
from sklearn.preprocessing import LabelEncoder
import joblib
import os

# Config device
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Charger le tokenizer
tokenizer = AutoTokenizer.from_pretrained("google-bert/bert-base-uncased")

# Charger le modèle
model = CustomBERT(n_class=5)
model.load_state_dict(torch.load("bert_news_classifier.pth", map_location=device))
model.to(device)
model.eval()

# Charger le label encoder
le = joblib.load("label_encoder.joblib")

def classify_news(text):
    inputs = tokenizer.encode_plus(
        text,
        return_tensors="pt",
        padding="max_length",
        truncation=True,
        max_length=512
    )
    input_ids = inputs["input_ids"].to(device)
    attention_mask = inputs["attention_mask"].to(device)

    with torch.no_grad():
        logits = model(input_ids, attention_mask)
        pred = torch.argmax(logits, dim=1).item()

    label = le.inverse_transform([pred])[0]
    return f"Classe prédite : {label}"

# Interface Gradio
iface = gr.Interface(
    fn=classify_news,
    inputs="text",
    outputs="text",
    title="Classificateur de News BERT"
)

iface.launch()